* default.nix
* shell.nix
  #+BEGIN_SRC nix :tangle shell.nix
    with import <nixpkgs> { };
  #+END_SRC
* runtests.sh
* TODO install.sh
  #+BEGIN_SRC sh :tangle install.sh :tangle-mode (identity #o755)
    #1 /ust/bin/env sh
    echo "Overwriting pkgs/development/compilers/julia/default.nix"
    cp -r pkgs/development/compilers/julia/* ../compilers/julia

    echo "You will have to manually copy any changes to"
    echo "pkgs/top-level/all-packages.nix."
  #+END_SRC
* tests
** TODO script
   #+BEGIN_SRC julia :tangle tests/script :mkdirp yes
     #! /usr/bin/nix-shell
     #!
     @test 1 == 1
   #+END_SRC
** DONE shell.nix
   - State "DONE"       from              [2017-08-05 Sat 17:59]
   #+BEGIN_SRC nix :tangle tests/shell.nix :mkdirp yes
     let
       pkgs = import <nixpkgs> {};
       stdenv = pkgs.stdenv;
     in with pkgs; {
       myProject = stdenv.mkDerivation {
	 name = "myProject";
	 version = "1";
	 src = if pkgs.lib.inNixShell then null else nix;

	 # pkgs.juliaPackages
	 buildInputs = with juliaPackages; [
	   julia
	 ];
       };
     }
   #+END_SRC
* Julia                                                             :nixroot:
** top-level
*** DONE all-packages.nix
    - State "DONE"       from              [2017-08-05 Sat 18:05]
    #+BEGIN_SRC nix :tangle pkgs/top-level/all-definitions.nix :mkdirp yes

      julia = callPackage ../development/compilers/julia {
	# TODO: split docs into a separate output
	  gmp = gmp6;
	  openblas = openblasCompat;
	  inherit (darwin.apple_sdk.frameworks) CoreServices ApplicationServices;
	  llvm = llvm_39;
	# withRecommendedPackages = false;
      };

      buildJuliaPackage = callPackage ../development/julia-modules/generic-build.nix { inherit julia; };

      MLKernels = buildJuliaPackage rec {
	name = "MLKernels";
	src = fetchFromGitHub {
	  owner = "trthatcher";
	  repo = "MLKernels.jl";
	  rev = "v0.2.0";
	  sha256 = "01kc47d3q9dk63hqag9sa83fdh24hj12x4zv94vdhas7sp2fqzfw";
	};
      };


      # juliaWrapper = callPackage ../development/julia-modules/wrapper.nix {
      #   recommendedPackages = with juliaPackages; [
      #     # BinDeps
      #   ];
      #   # Override this attribute to register additional libraries.
      #   packages = [];
      # };

      # juliaPackages = callPackage ../development/julia-modules {
      #   overrides = (config.juliaPackageOverrides or (p: {})) pkgs;
      # };
    #+END_SRC
** development
*** julia-modules
**** TODO default.nix
     #+BEGIN_SRC nix :tangle default.nix
       /* This file defines the composition for CRAN (R) packages. */

       { julia, pkgs, overrides }:

       let
	 inherit (pkgs) fetchurl stdenv lib;

	 buildJuliaPackage = pkgs.callPackage ./generic-builder.nix {
	   inherit julia;
	   # inherit (pkgs.darwin.apple_sdk.frameworks) Cocoa Foundation;
	   # inherit (pkgs) gettext gfortran;
	 };

	 # Generates package templates given per-repository settings
	 #
	 # some packages, e.g. cncaGUI, require X running while installation,
	 # so that we use xvfb-run if requireX is true.
	 mkDerive = {mkHomepage, mkUrls}: args:
	     lib.makeOverridable ({
	       name, version, sha256,
	       depends ? [],
	       doCheck ? true,
	       requireX ? false,
	       broken ? false,
	       hydraPlatforms ? julia.meta.hydraPlatforms
	     }: buildJuliaPackage {
	   name = "${name}-${version}";
	   src = fetchFromGitHub {
	     inherit sha256;
	     # (args // { inherit owner repo rev; });
	     urls = mkUrls (args // { inherit name version; });
	   };
	   inherit doCheck requireX;
	   propagatedBuildInputs = depends;
	   nativeBuildInputs = depends;
	   meta.homepage = mkHomepage (args // { inherit name; });
	   meta.platforms = julia.meta.platforms;
	   meta.hydraPlatforms = hydraPlatforms;
	   meta.broken = broken;
	 });

	 # Templates for generating Bioconductor and CRAN packages
	 # from the name, version, sha256, and optional per-package arguments above
	 #
	 # deriveBioc = mkDerive {
	 #   mkHomepage = {name, juliaVersion}:
	 #   "https://bioconductor.org/packages/${juliaVersion}/bioc/html/${name}.html";
	 #   mkUrls = {name, version, juliaVersion}:
	 #   [ "mirror://bioc/${juliaVersion}/bioc/src/contrib/${name}_${version}.tar.gz" ];
	 # };
	 deriveGH = mkDerive {
	   mkHomepage = {owner, repo, rev}:
	   "https://github.com/${owner}/${repo}";
	   mkUrls = {owner, repo, rev}:
	   [ "https://github.com/${owner}/${repo}/archive/${rev}.tar.gz" ];
	 };

	 # Overrides package definitions with nativeBuildInputs.
	 # For example,
	 #
	 # overrideNativeBuildInputs {
	 #   foo = [ pkgs.bar ]
	 # } old
	 #
	 # results in
	 #
	 # {
	 #   foo = old.foo.overrideDerivation (attrs: {
	 #     nativeBuildInputs = attrs.nativeBuildInputs ++ [ pkgs.bar ];
	 #   });
	 # }
	 overrideNativeBuildInputs = overrides: old:
	   lib.mapAttrs (name: value:
	     (builtins.getAttr name old).overrideDerivation (attrs: {
	       nativeBuildInputs = attrs.nativeBuildInputs ++ value;
	     })
	   ) overrides;

	 # Overrides package definitions with buildInputs.
	 # For example,
	 #
	 # overrideBuildInputs {
	 #   foo = [ pkgs.bar ]
	 # } old
	 #
	 # results in
	 #
	 # {
	 #   foo = old.foo.overrideDerivation (attrs: {
	 #     buildInputs = attrs.buildInputs ++ [ pkgs.bar ];
	 #   });
	 # }
	 overrideBuildInputs = overrides: old:
	   lib.mapAttrs (name: value:
	     (builtins.getAttr name old).overrideDerivation (attrs: {
	       buildInputs = attrs.buildInputs ++ value;
	     })
	   ) overrides;

	 # Overrides package definitions with new Julia dependencies.
	 # For example,
	 #
	 # overrideJuliaDepends {
	 #   foo = [ self.bar ]
	 # } old
	 #
	 # results in
	 #
	 # {
	 #   foo = old.foo.overrideDerivation (attrs: {
	 #     nativeBuildInputs = attrs.nativeBuildInputs ++ [ self.bar ];
	 #     propagatedNativeBuildInputs = attrs.propagatedNativeBuildInputs ++ [ self.bar ];
	 #   });
	 # }
	 overrideJuliaDepends = overrides: old:
	   lib.mapAttrs (name: value:
	     (builtins.getAttr name old).overrideDerivation (attrs: {
	       nativeBuildInputs = attrs.nativeBuildInputs ++ value;
	       propagatedNativeBuildInputs = attrs.propagatedNativeBuildInputs ++ value;
	     })
	   ) overrides;

	 # Overrides package definition requiring X running to install.
	 # For example,
	 #
	 # overrideRequireX [
	 #   "foo"
	 # ] old
	 #
	 # results in
	 #
	 # {
	 #   foo = old.foo.override {
	 #     requireX = true;
	 #   };
	 # }
	 overrideRequireX = packageNames: old:
	   let
	     nameValuePairs = map (name: {
	       inherit name;
	       value = (builtins.getAttr name old).override {
		 requireX = true;
	       };
	     }) packageNames;
	   in
	     builtins.listToAttrs nameValuePairs;

	 # Overrides package definition to skip check.
	 # For example,
	 #
	 # overrideSkipCheck [
	 #   "foo"
	 # ] old
	 #
	 # results in
	 #
	 # {
	 #   foo = old.foo.override {
	 #     doCheck = false;
	 #   };
	 # }
	 overrideSkipCheck = packageNames: old:
	   let
	     nameValuePairs = map (name: {
	       inherit name;
	       value = (builtins.getAttr name old).override {
		 doCheck = false;
	       };
	     }) packageNames;
	   in
	     builtins.listToAttrs nameValuePairs;

	 # Overrides package definition to mark it broken.
	 # For example,
	 #
	 # overrideBroken [
	 #   "foo"
	 # ] old
	 #
	 # results in
	 #
	 # {
	 #   foo = old.foo.override {
	 #     broken = true;
	 #   };
	 # }
	 overrideBroken = packageNames: old:
	   let
	     nameValuePairs = map (name: {
	       inherit name;
	       value = (builtins.getAttr name old).override {
		 broken = true;
	       };
	     }) packageNames;
	   in
	     builtins.listToAttrs nameValuePairs;

	 defaultOverrides = old: new:
	   let old0 = old; in
	   let
	     old1 = old0 // (overrideRequireX packagesRequireingX old0);
	     old2 = old1 // (overrideSkipCheck packagesToSkipCheck old1);
	     old3 = old2 // (overrideJuliaDepends packagesWithJuliaDepends old2);
	     old4 = old3 // (overrideNativeBuildInputs packagesWithNativeBuildInputs old3);
	     old5 = old4 // (overrideBuildInputs packagesWithBuildInputs old4);
	     old6 = old5 // (overrideBroken brokenPackages old5);
	     old = old6;
	   in old // (otherOverrides old new);

	 # Recursive override pattern.
	 # `_self` is a collection of packages;
	 # `self` is `_self` with overridden packages;
	 # packages in `_self` may depends on overridden packages.
	 self = (defaultOverrides _self self) // overrides;
	 _self = import ./julia-packages.nix { inherit self; derive = deriveBioc; };

	 # tweaks for the individual packages and "in self" follow

	 packagesWithJuliaDepends = {
	   # FactoMineR = [ self.car ];
	   # pander = [ self.codetools ];
	 };

	 packagesWithNativeBuildInputs = {
	   # adimpro = [ pkgs.imagemagick ];
	   # gputools = [ pkgs.pcre.dev pkgs.lzma.dev pkgs.zlib.dev
	   #              pkgs.bzip2.dev pkgs.icu.dev ];
	 };

	 packagesWithBuildInputs = {
	   # sort -t '=' -k 2
	   # Cairo = [ pkgs.pkgconfig ];
	   # Rsymphony = [ pkgs.pkgconfig pkgs.doxygen pkgs.graphviz pkgs.subversion ];
	 };

	 packagesRequireingX = [
	   # "xergm"
	 ];

	 packagesToSkipCheck = [
	   # "gputools" # requires CUDA runtime
	 ];

	 # Packages which cannot be installed due to lack of dependencies or other reasons.
	 brokenPackages = [
	   # "gputools"                        # depends on non-free cudatoolkit-8.0.61
	 ];

	 otherOverrides = old: new: {

	   # Cairo = old.Cairo.overrideDerivation (attrs: {
	   #   NIX_LDFLAGS = "-lfontconfig";
	   # });

	   # curl = old.curl.overrideDerivation (attrs: {
	   #   preConfigure = "patchShebangs configure";
	   # });

	   # BayesXsrc = old.BayesXsrc.overrideDerivation (attrs: {
	   #   patches = [ ./patches/BayesXsrc.patch ];
	   # });

	   # rJava = old.rJava.overrideDerivation (attrs: {
	   #   preConfigure = ''
	   # 	export JAVA_CPPFLAGS=-I${pkgs.jdk}/include/
	   # 	export JAVA_HOME=${pkgs.jdk}
	   #   '';
	   # });

	 };
       in
	 self
     #+END_SRC
**** TODO generate-julia-packages.jl
**** DONE julia-packages.nix
     - State "DONE"       from              [2017-08-05 Sat 19:14]
     #+BEGIN_SRC nix :tangle julia-packages.nix
       { self, derive }:
       let derive2 = derive { snapshot = "2017-06-30"; };
       in with self; {
	 # A3 = derive2 { name="A3"; version="1.0.0"; sha256="017hq9pjsv1h9i7cqk5cfx27as54shlhdsdvr6jkhb8jfkpdb6cw"; depends=[pbapply xtable]; };
       }
     #+END_SRC
**** DONE generic-build.nix
     - State "DONE"       from "TODO"       [2017-08-05 Sat 18:42]
     #+BEGIN_SRC nix :tangle generic-build.nix
       { stdenv, julia }:

       { name, buildInputs ? [], ... } @ attrs:

       stdenv.mkDerivation ({
	 buildInputs = buildInputs ++ [julia];

	 configurePhase = ''
	   runHook preConfigure
	   export JULIA_LOAD_PATH="$JULIA_LOAD_PATH''${JULIA_LOAD_PATH:+:}$out/src"
	   runHook postConfigure
	 '';

	 buildPhase = ''
	   runHook preBuild
	   runHook postBuild
	 '';

	 installPhase = ''
	   runHook preInstall

	   mkdir -p $out/src
	   mkdir -p $out/test

	   cp -r $src/src/* $out/src
	   cp -r $src/test/* $out/test

	   runHook postInstall
	 '';

	 postFixup = ''
	   if test -e $out/nix-support/propagated-native-build-inputs; then
	       ln -s $out/nix-support/propagated-native-build-inputs $out/nix-support/propagated-user-env-packages
	   fi
	 '';

	 doCheck = false;
	 doInstallCheck = false;

	 installCheck = ''
	   julia $out/test/runtests.jl
	 '';
       } // attrs // {
	 name = "julia-${name}";
       })
     #+END_SRC
**** DONE generic-shell.nix
     - State "DONE"       from              [2017-08-05 Sat 17:59]
     #+BEGIN_SRC nix :tangle generic-shell.nix
       with import ../../.. {};

       stdenv.mkDerivation {
	 name = "generate-julia-packages-shell";

	 buildCommand = "exit 1";

	 buildInputs = [ wget ];

	 nativeBuildInputs = [
	   (juliaWrapper.override {
	     packages = with juliaPackages; [
	     ];
	   })
	 ];
       }
     #+END_SRC
**** DONE test-evaluation.nix
     - State "DONE"       from              [2017-08-05 Sat 17:56]
     #+BEGIN_SRC nix :tangle test-evaluation.nix
       # Run
       #
       #   nix-build test-evaluation.nix --dry-run
       #
       # to test whether the Julia package set evaluates properly.

       let

	 config = {
	   allowBroken = true;
	   allowUnfree = true;
	 };

	 inherit (import ../../.. { inherit config; }) pkgs;

	 juliaWrapper = pkgs.juliaWrapper.override {
	   packages = pkgs.lib.filter pkgs.lib.isDerivation (pkgs.lib.attrValues pkgs.juliaPackages);
	 };

       in
	 juliaWrapper
     #+END_SRC
**** DONE wrapper.nix
     - State "DONE"       from              [2017-08-05 Sat 17:55]
     #+BEGIN_SRC nix :tangle wrapper.nix
       { stdenv, julia, makeWrapper, recommendedPackages, packages }:

       stdenv.mkDerivation {
	 name = julia.name + "-wrapper";

	 buildInputs = [makeWrapper julia] ++ recommendedPackages ++ packages;

	 unpackPhase = ":";

	 installPhase = ''
	   mkdir -p $out/bin
	   cd ${julia}/bin
	   for exe in *; do
	     makeWrapper ${julia}/bin/$exe $out/bin/$exe \
	       --prefix "JULIA_LOAD_PATH" ":" "$JULIA_LOAD_PATH"
	   done
	 '';

	 meta = {
	   platforms = stdenv.lib.platforms.unix;
	 };
       }
     #+END_SRC
*** compilers
**** julia
***** TODO default.nix<R>
      #+BEGIN_SRC nix tangle pkgs/development/compilers/julia/default.nix
	{ stdenv, fetchurl, bzip2, gfortran, libX11, libXmu, libXt, libjpeg, libpng
	, libtiff, ncurses, pango, pcre, perl, readline, tcl, texLive, tk, xz, zlib
	, less, texinfo, graphviz, icu, pkgconfig, bison, imake, which, jdk, openblas
	, curl, Cocoa, Foundation, cf-private, libobjc, tzdata, fetchpatch
	, withRecommendedPackages ? true
	, enableStrictBarrier ? false
	}:

	stdenv.mkDerivation rec {
	  name = "R-3.4.1";

	  src = fetchurl {
	    url = "http://cran.r-project.org/src/base/R-3/${name}.tar.gz";
	    sha256 = "0y7wlfk3cn1dxn2mpnxwvsk31s0599crbsyah8srm5pa2mfi7c82";
	  };

	  buildInputs = [
	    bzip2 gfortran libX11 libXmu libXt libXt libjpeg libpng libtiff ncurses
	    pango pcre perl readline texLive xz zlib less texinfo graphviz icu
	    pkgconfig bison imake which jdk openblas curl
	  ] ++ stdenv.lib.optionals (!stdenv.isDarwin) [ tcl tk ]
	    ++ stdenv.lib.optionals stdenv.isDarwin [ Cocoa Foundation cf-private libobjc ];

	  patches = [ ./no-usr-local-search-paths.patch ];

	  preConfigure = ''
	    configureFlagsArray=(
	      --disable-lto
	      --with${stdenv.lib.optionalString (!withRecommendedPackages) "out"}-recommended-packages
	      --with-blas="-L${openblas}/lib -lopenblas"
	      --with-lapack="-L${openblas}/lib -lopenblas"
	      --with-readline
	      --with-tcltk --with-tcl-config="${tcl}/lib/tclConfig.sh" --with-tk-config="${tk}/lib/tkConfig.sh"
	      --with-cairo
	      --with-libpng
	      --with-jpeglib
	      --with-libtiff
	      --with-ICU
	      ${stdenv.lib.optionalString enableStrictBarrier "--enable-strict-barrier"}
	      --enable-R-shlib
	      AR=$(type -p ar)
	      AWK=$(type -p gawk)
	      CC=$(type -p gcc)
	      CXX=$(type -p g++)
	      FC="${gfortran}/bin/gfortran" F77="${gfortran}/bin/gfortran"
	      JAVA_HOME="${jdk}"
	      RANLIB=$(type -p ranlib)
	      R_SHELL="${stdenv.shell}"
	  '' + stdenv.lib.optionalString stdenv.isDarwin ''
	      --without-tcltk
	      --without-aqua
	      --disable-R-framework
	      CC="clang"
	      CXX="clang++"
	      OBJC="clang"
	  '' + ''
	    )
	    echo >>etc/Renviron.in "TCLLIBPATH=${tk}/lib"
	    echo >>etc/Renviron.in "TZDIR=${tzdata}/share/zoneinfo"
	  '';

	  installTargets = [ "install" "install-info" "install-pdf" ];

	  doCheck = true;
	  preCheck = "export TZ=CET; bin/Rscript -e 'sessionInfo()'";

	  enableParallelBuilding = true;

	  setupHook = ./setup-hook.sh;

	  meta = with stdenv.lib; {
	    homepage = "http://www.r-project.org/";
	    description = "Free software environment for statistical computing and graphics";
	    license = licenses.gpl2Plus;

	    longDescription = ''
	      GNU R is a language and environment for statistical computing and
	      graphics that provides a wide variety of statistical (linear and
	      nonlinear modelling, classical statistical tests, time-series
	      analysis, classification, clustering, ...) and graphical
	      techniques, and is highly extensible. One of R's strengths is the
	      ease with which well-designed publication-quality plots can be
	      produced, including mathematical symbols and formulae where
	      needed. R is an integrated suite of software facilities for data
	      manipulation, calculation and graphical display. It includes an
	      effective data handling and storage facility, a suite of operators
	      for calculations on arrays, in particular matrices, a large,
	      coherent, integrated collection of intermediate tools for data
	      analysis, graphical facilities for data analysis and display
	      either on-screen or on hardcopy, and a well-developed, simple and
	      effective programming language which includes conditionals, loops,
	      user-defined recursive functions and input and output facilities.
	    '';

	    platforms = platforms.all;
	    hydraPlatforms = platforms.linux;

	    maintainers = [ maintainers.peti ];
	  };
	}
      #+END_SRC
***** DONE default.nix
      - State "DONE"       from              [2017-08-05 Sat 19:01]
      #+BEGIN_SRC nix :tangle pkgs/development/compilers/julia/default.nix :mkdirp yes
	{ stdenv, fetchFromGitHub, fetchgit, fetchurl
	# build tools
	, gfortran, m4, makeWrapper, patchelf, perl, which, python2, paxctl
	# libjulia dependencies
	, libunwind, llvm, readline, utf8proc, zlib
	# standard library dependencies
	, curl, fftwSinglePrec, fftw, gmp, libgit2, mpfr, openlibm, openspecfun, pcre2
	# linear algebra
	, openblas, arpack, suitesparse
	# Darwin frameworks
	, CoreServices, ApplicationServices
	}:

	with stdenv.lib;

	rec {
	  juliaGen = {
	    version, rev, sha256,
	  } : stdenv.mkDerivation rec {
	    inherit version rev;

	    name = "julia-${version}";

	    src = fetchFromGitHub {
	      owner = "JuliaLang";
	      repo = "julia";
	      rev = "v${version}";
	      sha256 = sha256;
	    };

	    # arpackWithBlas = arpack.override { inherit openblas; };
	    arpackWithBlas = arpack.overrideAttrs (oldAttrs: rec { inherit openblas; });
	    suitesparseWithBlas = suitesparse.overrideAttrs (oldAttrs: rec {
	      inherit openblas; });

	    dsfmtVersion = "2.2.3";
	    dsfmt = fetchurl {
	      url = "http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/dSFMT-src-${dsfmtVersion}.tar.gz";
	      sha256 = "03kaqbjbi6viz0n33dk5jlf6ayxqlsq4804n7kwkndiga9s4hd42";
	    };

	    libuvVersion = "8d5131b6c1595920dd30644cd1435b4f344b46c8";
	    libuv = fetchurl {
	      url = "https://api.github.com/repos/JuliaLang/libuv/tarball/${libuvVersion}";
	      sha256 = "1886r04igcs0k24sbb61wn10f8ki35c39jsnc5djv3rg4hvn9l49";
	    };

	    rmathVersion = "0.1";
	    rmath-julia = fetchurl {
	      url = "https://api.github.com/repos/JuliaLang/Rmath-julia/tarball/v${rmathVersion}";
	      sha256 = "0ai5dhjc43zcvangz123ryxmlbm51s21rg13bllwyn98w67arhb4";
	    };

	    virtualenvVersion = "15.0.0";
	    virtualenv = fetchurl {
	      url = "mirror://pypi/v/virtualenv/virtualenv-${virtualenvVersion}.tar.gz";
	      sha256 = "06fw4liazpx5vf3am45q2pdiwrv0id7ckv7n6zmpml29x6vkzmkh";
	    };

	    # with import ./deps;

	    prePatch = ''
	      mkdir deps/srccache
	      cp "${dsfmt}" "./deps/srccache/dsfmt-${dsfmtVersion}.tar.gz"
	      cp "${rmath-julia}" "./deps/srccache/Rmath-julia-${rmathVersion}.tar.gz"
	      cp "${libuv}" "./deps/srccache/libuv-${libuvVersion}.tar.gz"
	      cp "${virtualenv}" "./deps/srccache/virtualenv-${virtualenvVersion}.tar.gz"
	    '';

	    patches = [
	      ./patches/0001.1-use-system-utf8proc.patch
	      ./patches/0002-use-system-suitesparse.patch
	    ] ++ stdenv.lib.optional stdenv.needsPax ./patches/0004-hardened.patch;

	    postPatch = ''
	      patchShebangs . contrib
	    '';

	    buildInputs = [
	      arpackWithBlas fftw fftwSinglePrec gmp libgit2 libunwind mpfr
	      pcre2.dev openblas openlibm openspecfun readline suitesparseWithBlas utf8proc
	      zlib llvm
	    ]
	    ++ stdenv.lib.optionals stdenv.isDarwin [CoreServices ApplicationServices]
	    ;

	    nativeBuildInputs = [ curl gfortran m4 makeWrapper patchelf perl python2 which ]
	      ++ stdenv.lib.optional stdenv.needsPax paxctl;

	    makeFlags =
	      let
		arch = head (splitString "-" stdenv.system);
		march = { "x86_64" = "x86-64"; "i686" = "pentium4"; }."${arch}"
			or (throw "unsupported architecture: ${arch}");
		# Julia requires Pentium 4 (SSE2) or better
		cpuTarget = { "x86_64" = "x86-64"; "i686" = "pentium4"; }."${arch}"
			    or (throw "unsupported architecture: ${arch}");
	      in [
		"ARCH=${arch}"
		"MARCH=${march}"
		"JULIA_CPU_TARGET=${cpuTarget}"
		"PREFIX=$(out)"
		"prefix=$(out)"
		"SHELL=${stdenv.shell}"

		"USE_SYSTEM_BLAS=1"
		"USE_BLAS64=${if openblas.blas64 then "1" else "0"}"
		"LIBBLAS=-lopenblas"
		"LIBBLASNAME=libopenblas"

		"USE_SYSTEM_LAPACK=1"
		"LIBLAPACK=-lopenblas"
		"LIBLAPACKNAME=libopenblas"

		"USE_SYSTEM_SUITESPARSE=1"
		"SUITESPARSE_LIB=-lsuitesparse"
		"SUITESPARSE_INC=-I${suitesparse}/include"

		"USE_SYSTEM_ARPACK=1"
		"USE_SYSTEM_FFTW=1"
		"USE_SYSTEM_GMP=1"
		"USE_SYSTEM_LIBGIT2=1"
		"USE_SYSTEM_LIBUNWIND=1"
		# 'replutil' test failure with LLVM 3.8.0, invalid libraries with 3.7.1
		"USE_SYSTEM_LLVM=1"
		"USE_SYSTEM_MPFR=1"
		"USE_SYSTEM_OPENLIBM=1"
		"USE_SYSTEM_OPENSPECFUN=1"
		"USE_SYSTEM_PATCHELF=1"
		"USE_SYSTEM_PCRE=1"
		"PCRE_CONFIG=${pcre2.dev}/bin/pcre2-config"
		"PCRE_INCL_PATH=${pcre2.dev}/include/pcre2.h"
		"USE_SYSTEM_READLINE=1"
		"USE_SYSTEM_UTF8PROC=1"
		"USE_SYSTEM_ZLIB=1"
	      ];

	    NIX_CFLAGS_COMPILE = [ "-fPIC" ];

	    LD_LIBRARY_PATH = makeLibraryPath [
	      arpackWithBlas fftw fftwSinglePrec gmp libgit2 mpfr openblas openlibm
	      openspecfun pcre2 suitesparseWithBlas llvm
	    ];

	    dontStrip = true;
	    dontPatchELF = true;

	    enableParallelBuilding = true;

	    # doCheck = true;
	    doCheck = false;
	    checkTarget = "testall";

	    # Julia's tests require read/write access to $HOME
	    preCheck = ''
	      export HOME="$NIX_BUILD_TOP"
	    '';

	    preBuild = ''
	      sed -e '/^install:/s@[^ ]*/doc/[^ ]*@@' -i Makefile
	      sed -e '/[$](DESTDIR)[$](docdir)/d' -i Makefile
	    '';

	    postInstall = ''
	      for prog in "$out/bin/julia" "$out/bin/julia-debug"; do
		  wrapProgram "$prog" \
		      --prefix LD_LIBRARY_PATH : "$LD_LIBRARY_PATH:$out/lib/julia" \
		      --prefix PATH : "${stdenv.lib.makeBinPath [ curl ]}"
	      done
	    '';

	    setupHook = ./setup-hook.sh;

	    meta = {
	      description = "High-level performance-oriented dynamical language for technical computing";
	      homepage = "http://julialang.org/";
	      license = stdenv.lib.licenses.mit;
	      maintainers = with stdenv.lib.maintainers; [ raskin ];
	      platforms = [ "i686-linux" "x86_64-linux" "x86_64-darwin" ];
	      broken = stdenv.isi686;
	    };
	  };

	  myjulia = juliaGen {
	    version = "0.6.0";
	    rev = "903644385b91ed8d95e5e3a5716c089dd1f1b08a";
	    sha256 = "196fw7w9qxx5i7f68ya1s0427i8jfkbh2ysdv0l8q7i726wp0x9i";
	  };
	}.myjulia
      #+END_SRC
***** DONE deps.nix
      - State "DONE"       from              [2017-08-05 Sat 19:02]
      #+BEGIN_SRC nix :tangle pkgs/development/compilers/julia/deps.nix
	{
	  dsfmtVersion = "2.2.3";
	    dsfmt = fetchurl {
	      url = "http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/dSFMT-src-${dsfmtVersion}.tar.gz";
	      sha256 = "03kaqbjbi6viz0n33dk5jlf6ayxqlsq4804n7kwkndiga9s4hd42";
	    };

	    libuvVersion = "8d5131b6c1595920dd30644cd1435b4f344b46c8";
	    libuv = fetchurl {
	      url = "https://api.github.com/repos/JuliaLang/libuv/tarball/${libuvVersion}";
	      sha256 = "1886r04igcs0k24sbb61wn10f8ki35c39jsnc5djv3rg4hvn9l49";
	    };

	    rmathVersion = "0.1";
	    rmath-julia = fetchurl {
	      url = "https://api.github.com/repos/JuliaLang/Rmath-julia/tarball/v${rmathVersion}";
	      sha256 = "0ai5dhjc43zcvangz123ryxmlbm51s21rg13bllwyn98w67arhb4";
	    };

	    virtualenvVersion = "15.0.0";
	    virtualenv = fetchurl {
	      url = "mirror://pypi/v/virtualenv/virtualenv-${virtualenvVersion}.tar.gz";
	      sha256 = "06fw4liazpx5vf3am45q2pdiwrv0id7ckv7n6zmpml29x6vkzmkh";
	    };
	}
      #+END_SRC
***** DONE setup-hook.sh
      - State "DONE"       from              [2017-08-05 Sat 17:54]
      #+BEGIN_SRC sh :tangle pkgs/development/compilers/julia/setup-hook.sh :mkdirp yes
	addJuliaLoadPath () {
	    addToSearchPath JULIA_LOAD_PATH $1/src
	}
	echo "added $1/julia-packages to load path"

	envHooks+=(addJuliaLoadPath)
      #+END_SRC
